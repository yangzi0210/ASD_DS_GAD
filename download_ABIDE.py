"""
This script is to download ABIDE I dataset proposed by CPAC.
The data is formatted as 2D( fMRI under HO atlas) with global signal regression
and band pass filtering.
"""
import os
import io
import shutil
import argparse
import pandas as pd
import numpy as np
from construct_graph import brain_graph
from nilearn.datasets import fetch_abide_pcp
from nilearn.datasets.utils import _fetch_file

parser = argparse.ArgumentParser()

parser.add_argument('--root', type=str, default='./data', help='Path to store the brain graphs')
parser.add_argument('--verbose', type=bool, default=True, help='Print the download details')

args = parser.parse_args()


def delete_path(root):
    if os.path.isfile(root):
        try:
            os.remove(root)
        except:
            pass
    elif os.path.isdir(root):
        for item in os.listdir(root):
            file = os.path.join(root, item)
            delete_path(file)
            try:
                os.rmdir(root)
            except:
                pass


def load_text(data_path, text):
    """
    Load the non-imaging information from data downloaded.
    The official file Phenotypic_V1_0b_preprocessed1.csv contains some redundant information.
    :param data_path: path of the downloaded data.
    :return: non-imaging information for all the samples downloaded.
    """
    files = [f for f in os.listdir(data_path) if f.endswith('.1D')]
    filenames = [name.split('.')[0] for name in files]  # remove .1D
    file_idx = [name[:-8] for name in filenames]  # remove _rois_ho
    idx = pd.DataFrame({'FILE_ID': file_idx, 'file_name': files})
    logs = pd.merge(idx, text, how='left', on='FILE_ID')
    return logs


if __name__ == '__main__':
    print('Downloading the ABIDE I dataset preprocessed by CPAC...')
    fetch_abide_pcp(data_dir='./temp', derivatives='rois_ho', verbose=args.verbose,
                   pipeline='cpac', band_pass_filtering=True, global_signal_regression=True)

    # path generated by fetch abide
    path = os.path.join('./temp', 'ABIDE_pcp', 'cpac', 'filt_global')

    # phenotypic information
    info_path = os.path.join(args.root, 'phenotypic')
    if not os.path.exists(info_path):
        os.makedirs(info_path)
    print('Loading phenotypic information')
    phenotypic = pd.read_csv(os.path.join('./temp', 'ABIDE_pcp', 'Phenotypic_V1_0b_preprocessed1.csv'))
    logs = load_text(path, phenotypic)

    # rescale label value
    logs['label'] = [2 - i for i in logs['DX_GROUP']]
    logs.to_csv(os.path.join(args.root, 'phenotypic', 'log.csv'))

    # download HO atlas labels
    print('Downloading Harvard-Oxford Atlas')
    src_path = 'https://s3.amazonaws.com/fcp-indi/data/Projects/ABIDE_Initiative/Resources/ho_labels.csv'
    _fetch_file(src_path, info_path)
    atlas = pd.read_csv(os.path.join(info_path, 'ho_labels.csv'), comment='#', header=None, names=['index', 'area'])

    # construct graph representation of the brain
    print('Constructing the graph representation of the brain...')
    brain_graph(logs, atlas, os.path.join(args.root, 'ABIDE', 'raw'), path)

    # delete all the downloaded data
    print('Deleting the raw ABIDE I data...')
    delete_path('./temp')
